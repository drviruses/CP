{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"dr_virus": {
		"prefix": "dr_virus",
		"body": [
		  "/*",
		  "    @uthor: Amit Kumar",
		  "    user -->GitHub: drviruses ; CodeChef: dr_virus_ ; Codeforces: dr_virus_ ;AtCoder,Hackerearth,Hakerrank: dr_virus;",
		  "*/",
		  "#include <bits/stdc++.h>",
		  "#include <chrono>",
		  "using namespace std;",
		  "using namespace std::chrono;",
		  "//#include <boost/multiprecision/cpp_int.hpp>",
		  "//namespace mp = boost::multiprecision;",
		  "//#define ln mp::cpp_int;",
		  "#define int      long long",
		  "#define double   long double",
		  "#define uint     unsigned long long",
		  "#define endl \"\\n\"",
		  "#define all(vec) vec.begin(),vec.end()",
		  "int google_itr = 1;",
		  "#define google(x) cout<<\"Case #\"<<x<<\": \"",
		  "#define pi 3.14159265358979323846264338327950L",
		  "",
		  "vector<string> vec_splitter(string s) {",
          "		s += ',';",
          "		vector<string> res;",
          "		while(!s.empty()) {",
          "				res.push_back(s.substr(0, s.find(',')));",
          "				s = s.substr(s.find(',') + 1);",
          "		}",
          "		return res;",
          "}",
          "void debug_out(",
          "vector<string> __attribute__ ((unused)) args,",
          "__attribute__ ((unused)) int idx, ",
          "__attribute__ ((unused)) int LINE_NUM) { cerr << endl; } ",
          "template <typename Head, typename... Tail>",
          "void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T) {",
          "		if(idx > 0) cerr << \", \"; else cerr << \"Line(\" << LINE_NUM << \") \";",
          "		stringstream ss; ss << H;",
          "		cerr << args[idx] << \" = \" << ss.str();",
          "		debug_out(args, idx + 1, LINE_NUM, T...);",
          "}",
          "",
          "#define XOX",
          "#ifdef XOX",
              "    #define deb(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)",
          "#else",
          "    #define deb(...) 42",
          "#endif",
          "",
		  "",
		  "const int mod = 1e9+7;",
		  "const int inf = 1e18;",
		  "",
		  "",
		  "void virus(){", 
		  "        $0",
		  "}",
		  "",
		  "",
		  "int32_t main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(0);",
		  "    cout.tie(0);",
		  "    ",
		  "  /*#ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\",\"r\",stdin);",
		  "    freopen(\"output.txt\",\"w\",stdout);",
		  "    #endif*/",
		  "",
		  "    int t;",
		  "    cin >> t;",
		  "    while(t--){",
		  "           auto start = system_clock::now();",
		  "           virus();",
		  "           auto stop = system_clock::now();",
		  "           duration<double> duration = (stop - start);",
		  "           //cerr << \"\\nTime: \"<< fixed << setprecision(10) << (double)duration.count() <<\"sec\"<< endl;",
		  "           //your code goes here",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "dr_virus"
	  },
	  "DSU": {
		"prefix": "dsu",
		"body": [
		  "struct DSU {",
		  "	int connected;",
		  "	vector<int> par, sz;",
		  "",
		  "	void init(int n) {",
		  "		par = sz = vector<int> (n + 1, 0);",
		  "		for(int i = 1; i <= n; i++)",
		  "			par[i] = i, sz[i] = 1;",
		  "		connected = n;",
		  "	}",
		  "",
		  "	int getPar(int u) {",
		  "		while(u != par[u]) {",
		  "			par[u] = par[par[u]];",
		  "			u = par[u];",
		  "		}",
		  "		return u;",
		  "	}",
		  "",
		  "	int getSize(int u) {",
		  "		return sz[getPar(u)];",
		  "	}",
		  "",
		  "	void unite(int u, int v) {",
		  "		int par1 = getPar(u), par2 = getPar(v);",
		  "		if(par1 == par2)",
		  "			return;",
		  "		connected--;",
		  "		if(sz[par1] > sz[par2])",
		  "			swap(par1, par2);",
		  "		sz[par2] += sz[par1];",
		  "		sz[par1] = 0;",
		  "		par[par1] = par[par2];",
		  "	}",
		  "};"
		],
		"description": "DSU"
	  },

	  "dr_virus_single": {
		"prefix": "dr_virus_single",
		"body": [
		  "/*",
		  "    @uthor: Amit Kumar",
		  "    user -->GitHub: drviruses ; CodeChef: dr_virus_ ; Codeforces,AtCoder,Hackerearth,Hakerrank: dr_virus;",
		  "*/",
		  "#include <bits/stdc++.h>",
		  "#include <chrono>",
		  "using namespace std;",
		  "using namespace std::chrono;",
		  "//#include <boost/multiprecision/cpp_int.hpp>",
		  "//namespace mp = boost::multiprecision;",
		  "//#define ln mp::cpp_int;",
		  "#define int      long long",
		  "#define double   long double",
		  "#define uint     unsigned long long",
		  "#define all(vec) vec.begin(),vec.end()",
		  "#define endl \"\\n\"",
		  "int google_itr = 1;",
		  "#define google(x) cout<<\"Case #\"<<x<<\": \"",
		  "#define pi 3.14159265358979323846264338327950L",
		  "",
		  "vector<string> vec_splitter(string s) {",
          "		s += ',';",
          "		vector<string> res;",
          "		while(!s.empty()) {",
          "				res.push_back(s.substr(0, s.find(',')));",
          "				s = s.substr(s.find(',') + 1);",
          "		}",
          "		return res;",
          "}",
          "void debug_out(",
          "vector<string> __attribute__ ((unused)) args,",
          "__attribute__ ((unused)) int idx, ",
          "__attribute__ ((unused)) int LINE_NUM) { cerr << endl; } ",
          "template <typename Head, typename... Tail>",
          "void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T) {",
          "		if(idx > 0) cerr << \", \"; else cerr << \"Line(\" << LINE_NUM << \") \";",
          "		stringstream ss; ss << H;",
          "		cerr << args[idx] << \" = \" << ss.str();",
          "		debug_out(args, idx + 1, LINE_NUM, T...);",
          "}",
          "",
          "#define XOX",
          "#ifdef XOX",
              "    #define deb(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)",
          "#else",
          "    #define deb(...) 42",
          "#endif",
		  "",
		  "const int mod = 1e9+7;",
		  "const int inf = 1e18;",
		  "",
		  "",
		  "void virus(){",
		  "        $0",
		  "}",
		  "",
		  "",
		  "int32_t main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(0);",
		  "    cout.tie(0);",
		  "    ",
		  "  /*#ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\",\"r\",stdin);",
		  "    freopen(\"output.txt\",\"w\",stdout);",
		  "    #endif*/",
		  "",
		  "    int t = 1;",
		  "    //cin >> t;",
		  "    while(t--){",
		  "           auto start = system_clock::now();",
		  "           virus();",
		  "           auto stop = system_clock::now();",
		  "           duration<double> duration = (stop - start);",
		  "           //cerr << \"\\nTime: \"<< fixed << setprecision(10) << (double)duration.count() <<\"sec\"<< endl;",
		  "           //your code goes here",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "dr_virus_single"
	  },
	  "virus__": {
		"prefix": "virus__",
		"body": [
		  "#include <bits/stdc++.h>",
		  "#include <chrono>",
		  "using namespace std;",
		  "using namespace std::chrono;",
		  "//#include <boost/multiprecision/cpp_int.hpp>",
		  "//namespace mp = boost::multiprecision;",
		  "//#define ln mp::cpp_int;",
		  "#define int      long long",
		  "#define double   long double",
		  "#define uint     unsigned long long",
		  "#define endl \"\\n\"",
		  "#define all(vec) vec.begin(),vec.end()",
		  "int google_itr = 1;",
		  "#define google(x) cout<<\"Case #\"<<x<<\": \"",
		  "#define pi 3.14159265358979323846264338327950L",
		  "",
		  "vector<string> vec_splitter(string s) {",
          "		s += ',';",
          "		vector<string> res;",
          "		while(!s.empty()) {",
          "				res.push_back(s.substr(0, s.find(',')));",
          "				s = s.substr(s.find(',') + 1);",
          "		}",
          "		return res;",
          "}",
          "void debug_out(",
          "vector<string> __attribute__ ((unused)) args,",
          "__attribute__ ((unused)) int idx, ",
          "__attribute__ ((unused)) int LINE_NUM) { cerr << endl; } ",
          "template <typename Head, typename... Tail>",
          "void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T) {",
          "		if(idx > 0) cerr << \", \"; else cerr << \"Line(\" << LINE_NUM << \") \";",
          "		stringstream ss; ss << H;",
          "		cerr << args[idx] << \" = \" << ss.str();",
          "		debug_out(args, idx + 1, LINE_NUM, T...);",
          "}",
          "",
          "#define XOX",
          "#ifdef XOX",
              "    #define deb(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)",
          "#else",
          "    #define deb(...) 42",
          "#endif",
          "",
		  "",
		  "const int mod = 1e9+7;",
		  "const int inf = 1e18;",
		  "",
		  "",
		  "void virus(){", 
		  "        $0",
		  "}",
		  "",
		  "",
		  "int32_t main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(0);",
		  "    cout.tie(0);",
		  "    ",
		  "  /*#ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\",\"r\",stdin);",
		  "    freopen(\"output.txt\",\"w\",stdout);",
		  "    #endif*/",
		  "",
		  "    int t;",
		  "    cin >> t;",
		  "    while(t--){",
		  "           auto start = system_clock::now();",
		  "           virus();",
		  "           auto stop = system_clock::now();",
		  "            duration<double> duration = (stop - start);",
		  "           //cerr << \"\\nTime: \"<< fixed << setprecision(10) << (double)duration.count() <<\"sec\"<< endl;",
		  "        //your code goes here",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "virus__"
	  },
	  "factor": {
		"prefix": "factor",
		"body": [
		  "vector<pair<int,int>> factor_arr;",
		  " ",
		  "void myfactor(int num){ ",
		  "    int count = 0;   ",
		  "    while (!(num % 2)) { ",
		  "        num >>= 1; count++; ",
		  "    }  ",
		  "    if (count) factor_arr.push_back({2,count}); ",
		  "    for (auto i = 3; i <= sqrt(num); i += 2) { ",
		  "        count = 0; ",
		  "        while (num % i == 0) { ",
		  "            count++; ",
		  "            num /= i; ",
		  "        } ",
		  "        if (count) factor_arr.push_back({i,count}); ",
		  "    } ",
		  "    if (num > 2) factor_arr.push_back({num,1});",
		  "}",
		  ""
		],
		"description": "factor"
	  }

}
